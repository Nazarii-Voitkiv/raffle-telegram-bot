import { Telegraf } from 'telegraf';

const BOT_TOKEN = process.env.BOT_TOKEN;
const CHANNEL_ID = process.env.CHANNEL_ID;

const bot = new Telegraf(BOT_TOKEN || '');

// –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó –ø—Ä–æ –±–æ—Ç–∞
async function getBotUsername(): Promise<string> {
  try {
    const botInfo = await bot.telegram.getMe();
    return botInfo.username || '';
  } catch (error) {
    console.error('Failed to get bot info:', error);
    return '';
  }
}

export async function sendTelegramMessage(text: string, inlineKeyboard?: any) {
  try {
    // –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –≤ –∫–∞–Ω–∞–ª
    const message = await bot.telegram.sendMessage(CHANNEL_ID || '', text, {
      parse_mode: 'HTML',
      disable_web_page_preview: true,
      reply_markup: inlineKeyboard
    });
    return message.message_id;
  } catch (error) {
    console.error('Error sending telegram message to channel:', error);
    throw error;
  }
}

export async function editTelegramMessage(messageId: number, text: string) {
  try {
    await bot.telegram.editMessageText(CHANNEL_ID, messageId, undefined, text, {
      parse_mode: 'HTML',
      disable_web_page_preview: true
    });
  } catch (error) {
    console.error('Error editing telegram message:', error);
    throw error;
  }
}

export async function notifyWinners(raffle: any, winners: any[]) {
  try {
    // –†–µ–¥–∞–≥—É—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤ –∫–∞–Ω–∞–ª—ñ, —è–∫—â–æ —î ID –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
    if (raffle.announcement_message_id) {
      const channelMessage = formatWinnersMessage(raffle, winners);
      await editTelegramMessage(raffle.announcement_message_id, channelMessage);
    } else {
      // –Ø–∫—â–æ –Ω–µ–º–∞—î ID –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è, –≤—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –Ω–æ–≤–µ
      const channelMessage = formatWinnersMessage(raffle, winners);
      await sendTelegramMessage(channelMessage);
    }

    // –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –æ—Å–æ–±–∏—Å—Ç—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø–µ—Ä–µ–º–æ–∂—Ü—è–º
    for (const winner of winners) {
      if (winner.telegram_id) {
        try {
          const personalMessage = `üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º!\n\n–í—ã —Å—Ç–∞–ª–∏ –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–º –≤ —Ä–æ–∑—ã–≥—Ä—ã—à–µ "${raffle.title}"!\n\n–í–∞—à –≤—ã–∏–≥—Ä—ã—à: ${raffle.prize}`;
          
          await bot.telegram.sendMessage(winner.telegram_id, personalMessage, {
            parse_mode: 'HTML'
          });
          
          console.log(`Notification sent to winner ${winner.telegram_id}`);
        } catch (error) {
          console.error(`Failed to notify winner ${winner.telegram_id}:`, error);
        }
      }
    }
  } catch (error) {
    console.error('Error in notifyWinners:', error);
    throw error;
  }
}

export function formatWinnersMessage(raffle: any, winners: any[]) {
  const winnersList = winners
    .map(w => w.username ? `@${w.username}` : w.first_name || '–ê–Ω–æ–Ω–∏–º')
    .join(', ');

  return `üéâ <b>${raffle.title}</b>\n\n–†–æ–∑—ã–≥—Ä—ã—à –æ–∫–æ–Ω—á–µ–Ω!\n\n–ü–æ–±–µ–¥–∏—Ç–µ–ª–∏: ${winnersList}`; 
}

export async function formatRaffleAnnouncementMessage(raffle: any) {
  const endDate = new Date(raffle.end_date);
  const formattedDate = endDate.toLocaleString('ru-RU', { 
    day: 'numeric',
    month: 'long',
    year: 'numeric',
    hour: '2-digit',
    minute: '2-digit'
  });

  const message = `${raffle.announcement_text || 'üéâ –ù–æ–≤—ã–π —Ä–æ–∑—ã–≥—Ä—ã—à'}

${raffle.title}

${raffle.description || ''}

üéÅ –ü—Ä–∏–∑: ${raffle.prize} (${raffle.prize_count} —à—Ç.)
üë• –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–π: ${raffle.prize_count}
‚è∞ –û–∫–æ–Ω—á–∞–Ω–∏–µ: ${formattedDate}\n\n` +
    `–î–ª—è —É—á–∞—Å—Ç–∏—è –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ üëá`;

  // –û—Ç—Ä–∏–º—É—î–º–æ –∞–∫—Ç—É–∞–ª—å–Ω–∏–π username –±–æ—Ç–∞
  const username = await getBotUsername();
  
  const inlineKeyboard = {
    inline_keyboard: [
      [
        {
          text: 'üé≤ –£—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å –≤ —Ä–æ–∑—ã–≥—Ä—ã—à–µ',
          url: `tg://resolve?domain=${username}&start=raffle_${raffle.id}`
        }
      ]
    ]
  };

  return { message, inlineKeyboard };
}
