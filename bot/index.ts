import { Telegraf, Markup } from 'telegraf';
import { createRaffle, getRaffles, getRaffle, getParticipantCount, isParticipating, addParticipant } from '../lib/db';
import dotenv from 'dotenv';

dotenv.config({ path: '.env.local' });

const WEBAPP_URL = process.env.WEBAPP_URL;
const BOT_TOKEN = process.env.BOT_TOKEN;
const ADMIN_CHAT_ID = process.env.ADMIN_CHAT_ID;

// –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–µ–æ–±—Ö—ñ–¥–Ω–∏—Ö –∑–º—ñ–Ω–Ω–∏—Ö —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞
if (!BOT_TOKEN) {
  throw new Error('BOT_TOKEN must be provided!');
}

if (!WEBAPP_URL) {
  throw new Error('WEBAPP_URL must be provided!');
}

if (!WEBAPP_URL.startsWith('https://')) {
  throw new Error('WEBAPP_URL must start with https://');
}

const bot = new Telegraf(BOT_TOKEN);

// Middleware –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ —á–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤—ñ–¥ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞
const adminOnly = async (ctx: any, next: () => Promise<void>) => {
  if (ctx.chat?.id.toString() === ADMIN_CHAT_ID) {
    return next();
  }
  await ctx.reply('–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.');
};

// –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –Ω–æ–≤–æ–≥–æ —Ä–æ–∑—ñ–≥—Ä–∞—à—É (—Ç—ñ–ª—å–∫–∏ –¥–ª—è –∞–¥–º—ñ–Ω–∞)
bot.command('create_raffle', adminOnly, async (ctx) => {
  const message = ctx.message.text.split('\n');
  if (message.length < 7) {
    return ctx.reply(
      '–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç:\n/create_raffle\n–ù–∞–∑–≤–∞–Ω–∏–µ\n–û–ø–∏—Å–∞–Ω–∏–µ\n–ü—Ä–∏–∑\n–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–∏–∑–æ–≤\n–ú–∞–∫—Å–∏–º—É–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π\n–û–∫–æ–Ω—á–∞–Ω–∏–µ —Ä–æ–∑—ã–≥—Ä—ã—à–∞ (YYYY-MM-DD)'
    );
  }

  try {
    const [
      ,
      title,
      description,
      prize,
      prizeCount,
      maxParticipants,
      endDate
    ] = message;

    await ctx.reply('–°–æ–∑–¥–∞–Ω–∏–µ —Ä–æ–∑—ã–≥—Ä—ã—à–∞...');
    
    const raffleId = await createRaffle({
      title,
      description,
      prize,
      prize_count: parseInt(prizeCount),
      max_participants: parseInt(maxParticipants),
      end_date: new Date(endDate).toISOString()
    });

    if (raffleId) {
      await ctx.reply('–†–æ–∑—ã–≥—Ä–∞—à —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!');
    } else {
      await ctx.reply('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ä–æ–∑—ã–≥—Ä—ã—à–∞.');
    }
  } catch (error) {
    console.error('Error creating raffle:', error);
    await ctx.reply('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ä–æ–∑—ã–≥—Ä—ã—à–∞. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö.');
  }
});

// –§—É–Ω–∫—Ü—ñ—è –¥–ª—è —Ñ–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ —Ä–æ–∑—ñ–≥—Ä–∞—à
async function formatRaffleMessage(raffle: any) {
  const participantCount = await getParticipantCount(raffle.id);
  const maxParticipantsText = raffle.max_participants > 0 
    ? `/${raffle.max_participants}` 
    : '';

  const message = `
üéâ ${raffle.title}

${raffle.description || ''}

üéÅ –ü—Ä–∏–∑: ${raffle.prize} (${raffle.prize_count} —à—Ç.)
üë• –£—á–∞—Å—Ç–Ω–∏–∫–æ–≤: ${participantCount}${maxParticipantsText}
‚è∞ –î–æ: ${new Date(raffle.end_date).toLocaleString()}
`;

  const webAppUrl = `${WEBAPP_URL}/raffle/${raffle.id}`;
  const keyboard = {
    inline_keyboard: [[
      Markup.button.webApp('üé≤ –£—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å', webAppUrl)
    ]]
  };

  return { message, keyboard };
}

// –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø–æ–∫–∞–∑—É –∞–∫—Ç–∏–≤–Ω–∏—Ö —Ä–æ–∑—ñ–≥—Ä–∞—à—ñ–≤
bot.command('raffles', async (ctx) => {
  try {
    const raffles = await getRaffles();
    const activeRaffles = raffles.filter(raffle => new Date(raffle.end_date) > new Date());

    if (activeRaffles.length === 0) {
      return ctx.reply('–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ä–æ–∑—ã–≥—Ä—ã—à–µ–π.');
    }

    for (const raffle of activeRaffles) {
      try {
        const { message, keyboard } = await formatRaffleMessage(raffle);
        await ctx.reply(message, { reply_markup: keyboard });
      } catch (error) {
        console.error('Error sending raffle message:', error);
      }
    }
  } catch (error) {
    console.error('Error getting raffles:', error);
    await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ —Ä–æ–∑—ã–≥—Ä—ã—à–µ–π.');
  }
});

// –û–±—Ä–æ–±–∫–∞ –Ω–∞—Ç–∏—Å–∫–∞–Ω–Ω—è –∫–Ω–æ–ø–∫–∏ "–£—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å"
bot.on('callback_query', async (ctx: any) => {
  try {
    if (!ctx.callbackQuery?.data?.startsWith('join_')) {
      return;
    }

    const raffleId = parseInt(ctx.callbackQuery.data.split('_')[1]);
    const userId = ctx.from.id;

    const raffle = await getRaffle(raffleId);
    if (!raffle) {
      await ctx.answerCbQuery('–†–æ–∑—ã–≥—Ä—ã—à –Ω–µ –Ω–∞–π–¥–µ–Ω.');
      return;
    }

    if (new Date(raffle.end_date) < new Date()) {
      await ctx.answerCbQuery('–≠—Ç–æ—Ç —Ä–æ–∑—ã–≥—Ä—ã—à —É–∂–µ –∑–∞–≤–µ—Ä—à–µ–Ω.');
      return;
    }

    const isUserParticipating = await isParticipating(raffleId, userId);
    if (isUserParticipating) {
      await ctx.answerCbQuery('–í—ã —É–∂–µ –ø—Ä–∏–Ω—è–ª–∏ —É—á–∞—Å—Ç–∏–µ –≤ —ç—Ç–æ–º —Ä–æ–∑—ã–≥—Ä—ã—à–µ.');
      return;
    }

    if (raffle.max_participants > 0) {
      const currentCount = await getParticipantCount(raffleId);
      if (currentCount >= raffle.max_participants) {
        await ctx.answerCbQuery('–°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤.');
        return;
      }
    }

    const webAppUrl = `${WEBAPP_URL}/raffle/${raffle.id}`;
    await ctx.reply(
      '–í—ã –ø—Ä–∏–Ω—è–ª–∏ —É—á–∞—Å—Ç–∏–µ –≤ —Ä–æ–∑—ã–≥—Ä—ã—à–µ:',
      {
        reply_markup: {
          inline_keyboard: [[
            Markup.button.webApp(
              '–ü—Ä–∏–Ω—è—Ç—å —É—á–∞—Å—Ç–∏–µ',
              webAppUrl
            )
          ]]
        }
      }
    );

    await ctx.answerCbQuery();
  } catch (error) {
    console.error('Error processing callback:', error);
    await ctx.answerCbQuery('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–ª–±–µ–∫–∞.');
  }
});

// –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –¥–æ–ø–æ–º–æ–≥–∏
bot.command('help', async (ctx) => {
  const helpText = `
–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:
/raffles - –ü–æ–∫–∞–∑–∞—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–µ —Ä–æ–∑—ã–≥—Ä—ã—à–∏
/admin - –û—Ç–∫—Ä—ã—Ç—å –ø–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ

${ctx.chat?.id.toString() === ADMIN_CHAT_ID ? `
–ö–æ–º–∞–Ω–¥—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:
/create_raffle - –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π —Ä–æ–∑—ã–≥—Ä—ã—à
–§–æ—Ä–º–∞—Ç:
/create_raffle
–ù–∞–∑–≤–∞–Ω–∏–µ
–û–ø–∏—Å–∞–Ω–∏–µ
–ü—Ä–∏–∑
–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–∏–∑–æ–≤
–ú–∞–∫—Å–∏–º—É–º —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
–î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è (YYYY-MM-DD)` : ''}
`;

  await ctx.reply(helpText);
});

// –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø–æ—á–∞—Ç–∫—É —Ä–æ–±–æ—Ç–∏ –∑ –±–æ—Ç–æ–º
bot.command('start', async (ctx) => {
  const startPayload = ctx.message.text.split(' ')[1];
  
  if (startPayload && startPayload.startsWith('raffle_')) {
    const raffleId = parseInt(startPayload.replace('raffle_', ''), 10);
    try {
      const raffle = await getRaffle(raffleId);
      
      if (!raffle) {
        return ctx.reply('–†–æ–∑—ã–≥—Ä—ã—à –Ω–µ –Ω–∞–π–¥–µ–Ω.');
      }

      if (new Date(raffle.end_date) < new Date()) {
        return ctx.reply('–≠—Ç–æ—Ç —Ä–æ–∑—ã–≥—Ä—ã—à —É–∂–µ –∑–∞–≤–µ—Ä—à–µ–Ω.');
      }

      const { message, keyboard } = await formatRaffleMessage(raffle);
      await ctx.reply(message, { reply_markup: keyboard });
    } catch (error) {
      console.error('Error handling raffle start:', error);
      await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ä–æ–∑—ã–≥—Ä—ã—à–∞.');
    }
  } else {
    await ctx.reply('–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è —É—á–∞—Å—Ç–∏—è –≤ —Ä–æ–∑—ã–≥—Ä—ã—à–∞—Ö. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥');
  }
});

// –û–±—Ä–æ–±–∫–∞ –Ω–∞—Ç–∏—Å–∫–∞–Ω–Ω—è –∫–Ω–æ–ø–∫–∏ "–£—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å"
bot.action(/^join_(\d+)$/, async (ctx) => {
  const raffleId = parseInt(ctx.match[1], 10);
  const userId = ctx.from?.id;
  const username = ctx.from?.username;
  const firstName = ctx.from?.first_name;

  if (!userId) {
    return ctx.answerCbQuery('–û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è');
  }

  try {
    const raffle = await getRaffle(raffleId);
    if (!raffle) {
      return ctx.answerCbQuery('–†–æ–∑—ã–≥—Ä—ã—à –Ω–µ –Ω–∞–π–¥–µ–Ω');
    }

    if (new Date(raffle.end_date) < new Date()) {
      return ctx.answerCbQuery('–≠—Ç–æ—Ç —Ä–æ–∑—ã–≥—Ä—ã—à —É–∂–µ –∑–∞–≤–µ—Ä—à–µ–Ω');
    }

    const participantCount = await getParticipantCount(raffle.id);
    if (raffle.max_participants > 0 && participantCount >= raffle.max_participants) {
      return ctx.answerCbQuery('–î–æ—Å—Ç–∏–≥–Ω—É—Ç–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤');
    }

    const isUserParticipating = await isParticipating(raffle.id, userId);
    if (isUserParticipating) {
      return ctx.answerCbQuery('–í—ã —É–∂–µ —É—á–∞—Å—Ç–≤—É–µ—Ç–µ –≤ —ç—Ç–æ–º —Ä–æ–∑—ã–≥—Ä—ã—à–µ');
    }

    // Get IP address (using a default value since it's required)
    const ipAddress = ctx.from?.username || 'unknown';

    await addParticipant({
      raffle_id: raffle.id,
      telegram_id: userId,
      username: username || '',
      first_name: firstName || '',
      ip_address: ipAddress
    });
    
    await ctx.answerCbQuery('–í—ã —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª–∏—Å—å –∫ —Ä–æ–∑—ã–≥—Ä—ã—à—É!');
    
    // –û–Ω–æ–≤–ª—é—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ –Ω–æ–≤–æ—é –∫–Ω–æ–ø–∫–æ—é
    const message = ctx.callbackQuery.message;
    if (message) {
      await ctx.editMessageReplyMarkup({
        inline_keyboard: [
          [{ text: '‚úÖ –í—ã —É—á–∞—Å—Ç–≤—É–µ—Ç–µ', callback_data: 'already_joined' }]
        ]
      });
    }
  } catch (error) {
    console.error('Error joining raffle:', error);
    await ctx.answerCbQuery('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–∏ –∫ —Ä–æ–∑—ã–≥—Ä—ã—à—É');
  }
});

// –û–±—Ä–æ–±–∫–∞ –Ω–∞—Ç–∏—Å–∫–∞–Ω–Ω—è –∫–Ω–æ–ø–∫–∏ "–í—ã —É—á–∞—Å—Ç–≤—É–µ—Ç–µ"
bot.action('already_joined', async (ctx) => {
  await ctx.answerCbQuery('–í—ã —É–∂–µ —É—á–∞—Å—Ç–≤—É–µ—Ç–µ –≤ —ç—Ç–æ–º —Ä–æ–∑—ã–≥—Ä—ã—à–µ');
});

// –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –¥–æ—Å—Ç—É–ø—É –¥–æ –∞–¥–º—ñ–Ω-–ø–∞–Ω–µ–ª—ñ
bot.command('admin', async (ctx) => {
  const webAppUrl = `${WEBAPP_URL}/admin`;
  await ctx.reply(
    '–ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ –ø–æ —Å—Å—ã–ª–∫–µ:',
    {
      reply_markup: {
        inline_keyboard: [[
          Markup.button.webApp(
            '–û—Ç–∫—Ä—ã—Ç—å –ø–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞',
            webAppUrl
          )
        ]]
      }
    }
  );
});

// –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
bot.launch().then(() => {
  console.log('Bot is running...');
  console.log('WebApp URL:', WEBAPP_URL); // –î–ª—è –¥–µ–±–∞–≥—É
}).catch((error) => {
  console.error('Error starting bot:', error);
});

// Enable graceful stop
process.once('SIGINT', () => bot.stop('SIGINT'));
process.once('SIGTERM', () => bot.stop('SIGTERM'));
